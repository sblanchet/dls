// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dlsd.proto

#ifndef PROTOBUF_dlsd_2eproto__INCLUDED
#define PROTOBUF_dlsd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dlsd_2eproto();
void protobuf_AssignDesc_dlsd_2eproto();
void protobuf_ShutdownFile_dlsd_2eproto();

class DlsRequest;
class DirInfoRequest;
class DirInfoResponse;
class JobInfo;
class ChannelInfo;

enum ChannelType {
  TUNKNOWN = 0,
  TCHAR = 1,
  TUCHAR = 2,
  TSHORT = 3,
  TUSHORT = 4,
  TINT = 5,
  TUINT = 6,
  TLINT = 7,
  TULINT = 8,
  TFLT = 9,
  TDBL = 10
};
bool ChannelType_IsValid(int value);
const ChannelType ChannelType_MIN = TUNKNOWN;
const ChannelType ChannelType_MAX = TDBL;
const int ChannelType_ARRAYSIZE = ChannelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChannelType_descriptor();
inline const ::std::string& ChannelType_Name(ChannelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChannelType_descriptor(), value);
}
inline bool ChannelType_Parse(
    const ::std::string& name, ChannelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChannelType>(
    ChannelType_descriptor(), name, value);
}
// ===================================================================

class DlsRequest : public ::google::protobuf::Message {
 public:
  DlsRequest();
  virtual ~DlsRequest();

  DlsRequest(const DlsRequest& from);

  inline DlsRequest& operator=(const DlsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DlsRequest& default_instance();

  void Swap(DlsRequest* other);

  // implements Message ----------------------------------------------

  DlsRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DlsRequest& from);
  void MergeFrom(const DlsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DirInfoRequest dir_info = 1;
  inline bool has_dir_info() const;
  inline void clear_dir_info();
  static const int kDirInfoFieldNumber = 1;
  inline const ::DirInfoRequest& dir_info() const;
  inline ::DirInfoRequest* mutable_dir_info();
  inline ::DirInfoRequest* release_dir_info();
  inline void set_allocated_dir_info(::DirInfoRequest* dir_info);

  // @@protoc_insertion_point(class_scope:DlsRequest)
 private:
  inline void set_has_dir_info();
  inline void clear_has_dir_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::DirInfoRequest* dir_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dlsd_2eproto();
  friend void protobuf_AssignDesc_dlsd_2eproto();
  friend void protobuf_ShutdownFile_dlsd_2eproto();

  void InitAsDefaultInstance();
  static DlsRequest* default_instance_;
};
// -------------------------------------------------------------------

class DirInfoRequest : public ::google::protobuf::Message {
 public:
  DirInfoRequest();
  virtual ~DirInfoRequest();

  DirInfoRequest(const DirInfoRequest& from);

  inline DirInfoRequest& operator=(const DirInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DirInfoRequest& default_instance();

  void Swap(DirInfoRequest* other);

  // implements Message ----------------------------------------------

  DirInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DirInfoRequest& from);
  void MergeFrom(const DirInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:DirInfoRequest)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dlsd_2eproto();
  friend void protobuf_AssignDesc_dlsd_2eproto();
  friend void protobuf_ShutdownFile_dlsd_2eproto();

  void InitAsDefaultInstance();
  static DirInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class DirInfoResponse : public ::google::protobuf::Message {
 public:
  DirInfoResponse();
  virtual ~DirInfoResponse();

  DirInfoResponse(const DirInfoResponse& from);

  inline DirInfoResponse& operator=(const DirInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DirInfoResponse& default_instance();

  void Swap(DirInfoResponse* other);

  // implements Message ----------------------------------------------

  DirInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DirInfoResponse& from);
  void MergeFrom(const DirInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // repeated .JobInfo job = 2;
  inline int job_size() const;
  inline void clear_job();
  static const int kJobFieldNumber = 2;
  inline const ::JobInfo& job(int index) const;
  inline ::JobInfo* mutable_job(int index);
  inline ::JobInfo* add_job();
  inline const ::google::protobuf::RepeatedPtrField< ::JobInfo >&
      job() const;
  inline ::google::protobuf::RepeatedPtrField< ::JobInfo >*
      mutable_job();

  // @@protoc_insertion_point(class_scope:DirInfoResponse)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;
  ::google::protobuf::RepeatedPtrField< ::JobInfo > job_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dlsd_2eproto();
  friend void protobuf_AssignDesc_dlsd_2eproto();
  friend void protobuf_ShutdownFile_dlsd_2eproto();

  void InitAsDefaultInstance();
  static DirInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class JobInfo : public ::google::protobuf::Message {
 public:
  JobInfo();
  virtual ~JobInfo();

  JobInfo(const JobInfo& from);

  inline JobInfo& operator=(const JobInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JobInfo& default_instance();

  void Swap(JobInfo* other);

  // implements Message ----------------------------------------------

  JobInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JobInfo& from);
  void MergeFrom(const JobInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated .ChannelInfo channel = 2;
  inline int channel_size() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline const ::ChannelInfo& channel(int index) const;
  inline ::ChannelInfo* mutable_channel(int index);
  inline ::ChannelInfo* add_channel();
  inline const ::google::protobuf::RepeatedPtrField< ::ChannelInfo >&
      channel() const;
  inline ::google::protobuf::RepeatedPtrField< ::ChannelInfo >*
      mutable_channel();

  // @@protoc_insertion_point(class_scope:JobInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ChannelInfo > channel_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dlsd_2eproto();
  friend void protobuf_AssignDesc_dlsd_2eproto();
  friend void protobuf_ShutdownFile_dlsd_2eproto();

  void InitAsDefaultInstance();
  static JobInfo* default_instance_;
};
// -------------------------------------------------------------------

class ChannelInfo : public ::google::protobuf::Message {
 public:
  ChannelInfo();
  virtual ~ChannelInfo();

  ChannelInfo(const ChannelInfo& from);

  inline ChannelInfo& operator=(const ChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelInfo& default_instance();

  void Swap(ChannelInfo* other);

  // implements Message ----------------------------------------------

  ChannelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelInfo& from);
  void MergeFrom(const ChannelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string unit = 3;
  inline bool has_unit() const;
  inline void clear_unit();
  static const int kUnitFieldNumber = 3;
  inline const ::std::string& unit() const;
  inline void set_unit(const ::std::string& value);
  inline void set_unit(const char* value);
  inline void set_unit(const char* value, size_t size);
  inline ::std::string* mutable_unit();
  inline ::std::string* release_unit();
  inline void set_allocated_unit(::std::string* unit);

  // required .ChannelType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::ChannelType type() const;
  inline void set_type(::ChannelType value);

  // optional bool recording = 5;
  inline bool has_recording() const;
  inline void clear_recording();
  static const int kRecordingFieldNumber = 5;
  inline bool recording() const;
  inline void set_recording(bool value);

  // @@protoc_insertion_point(class_scope:ChannelInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_unit();
  inline void clear_has_unit();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_recording();
  inline void clear_has_recording();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  int type_;
  ::std::string* unit_;
  bool recording_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_dlsd_2eproto();
  friend void protobuf_AssignDesc_dlsd_2eproto();
  friend void protobuf_ShutdownFile_dlsd_2eproto();

  void InitAsDefaultInstance();
  static ChannelInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// DlsRequest

// optional .DirInfoRequest dir_info = 1;
inline bool DlsRequest::has_dir_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DlsRequest::set_has_dir_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DlsRequest::clear_has_dir_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DlsRequest::clear_dir_info() {
  if (dir_info_ != NULL) dir_info_->::DirInfoRequest::Clear();
  clear_has_dir_info();
}
inline const ::DirInfoRequest& DlsRequest::dir_info() const {
  return dir_info_ != NULL ? *dir_info_ : *default_instance_->dir_info_;
}
inline ::DirInfoRequest* DlsRequest::mutable_dir_info() {
  set_has_dir_info();
  if (dir_info_ == NULL) dir_info_ = new ::DirInfoRequest;
  return dir_info_;
}
inline ::DirInfoRequest* DlsRequest::release_dir_info() {
  clear_has_dir_info();
  ::DirInfoRequest* temp = dir_info_;
  dir_info_ = NULL;
  return temp;
}
inline void DlsRequest::set_allocated_dir_info(::DirInfoRequest* dir_info) {
  delete dir_info_;
  dir_info_ = dir_info;
  if (dir_info) {
    set_has_dir_info();
  } else {
    clear_has_dir_info();
  }
}

// -------------------------------------------------------------------

// DirInfoRequest

// optional string path = 1;
inline bool DirInfoRequest::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DirInfoRequest::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DirInfoRequest::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DirInfoRequest::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& DirInfoRequest::path() const {
  return *path_;
}
inline void DirInfoRequest::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void DirInfoRequest::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void DirInfoRequest::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DirInfoRequest::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* DirInfoRequest::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DirInfoRequest::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DirInfoResponse

// optional string path = 1;
inline bool DirInfoResponse::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DirInfoResponse::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DirInfoResponse::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DirInfoResponse::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& DirInfoResponse::path() const {
  return *path_;
}
inline void DirInfoResponse::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void DirInfoResponse::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void DirInfoResponse::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DirInfoResponse::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* DirInfoResponse::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DirInfoResponse::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .JobInfo job = 2;
inline int DirInfoResponse::job_size() const {
  return job_.size();
}
inline void DirInfoResponse::clear_job() {
  job_.Clear();
}
inline const ::JobInfo& DirInfoResponse::job(int index) const {
  return job_.Get(index);
}
inline ::JobInfo* DirInfoResponse::mutable_job(int index) {
  return job_.Mutable(index);
}
inline ::JobInfo* DirInfoResponse::add_job() {
  return job_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::JobInfo >&
DirInfoResponse::job() const {
  return job_;
}
inline ::google::protobuf::RepeatedPtrField< ::JobInfo >*
DirInfoResponse::mutable_job() {
  return &job_;
}

// -------------------------------------------------------------------

// JobInfo

// required uint32 id = 1;
inline bool JobInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JobInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JobInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JobInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 JobInfo::id() const {
  return id_;
}
inline void JobInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// repeated .ChannelInfo channel = 2;
inline int JobInfo::channel_size() const {
  return channel_.size();
}
inline void JobInfo::clear_channel() {
  channel_.Clear();
}
inline const ::ChannelInfo& JobInfo::channel(int index) const {
  return channel_.Get(index);
}
inline ::ChannelInfo* JobInfo::mutable_channel(int index) {
  return channel_.Mutable(index);
}
inline ::ChannelInfo* JobInfo::add_channel() {
  return channel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ChannelInfo >&
JobInfo::channel() const {
  return channel_;
}
inline ::google::protobuf::RepeatedPtrField< ::ChannelInfo >*
JobInfo::mutable_channel() {
  return &channel_;
}

// -------------------------------------------------------------------

// ChannelInfo

// required uint32 id = 1;
inline bool ChannelInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChannelInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ChannelInfo::id() const {
  return id_;
}
inline void ChannelInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool ChannelInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChannelInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChannelInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChannelInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChannelInfo::name() const {
  return *name_;
}
inline void ChannelInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChannelInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChannelInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChannelInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ChannelInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChannelInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string unit = 3;
inline bool ChannelInfo::has_unit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChannelInfo::set_has_unit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChannelInfo::clear_has_unit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChannelInfo::clear_unit() {
  if (unit_ != &::google::protobuf::internal::kEmptyString) {
    unit_->clear();
  }
  clear_has_unit();
}
inline const ::std::string& ChannelInfo::unit() const {
  return *unit_;
}
inline void ChannelInfo::set_unit(const ::std::string& value) {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    unit_ = new ::std::string;
  }
  unit_->assign(value);
}
inline void ChannelInfo::set_unit(const char* value) {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    unit_ = new ::std::string;
  }
  unit_->assign(value);
}
inline void ChannelInfo::set_unit(const char* value, size_t size) {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    unit_ = new ::std::string;
  }
  unit_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChannelInfo::mutable_unit() {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    unit_ = new ::std::string;
  }
  return unit_;
}
inline ::std::string* ChannelInfo::release_unit() {
  clear_has_unit();
  if (unit_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unit_;
    unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChannelInfo::set_allocated_unit(::std::string* unit) {
  if (unit_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_;
  }
  if (unit) {
    set_has_unit();
    unit_ = unit;
  } else {
    clear_has_unit();
    unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .ChannelType type = 4;
inline bool ChannelInfo::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChannelInfo::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChannelInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChannelInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ChannelType ChannelInfo::type() const {
  return static_cast< ::ChannelType >(type_);
}
inline void ChannelInfo::set_type(::ChannelType value) {
  assert(::ChannelType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool recording = 5;
inline bool ChannelInfo::has_recording() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChannelInfo::set_has_recording() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChannelInfo::clear_has_recording() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChannelInfo::clear_recording() {
  recording_ = false;
  clear_has_recording();
}
inline bool ChannelInfo::recording() const {
  return recording_;
}
inline void ChannelInfo::set_recording(bool value) {
  set_has_recording();
  recording_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChannelType>() {
  return ::ChannelType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dlsd_2eproto__INCLUDED
